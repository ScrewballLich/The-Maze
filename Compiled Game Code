//variables for the player, pointer, and bullets
let player;
let pointer;
let bullets = [];
let bulletOrder = 0;
let powerupsOnScreen = [];

let globalTimer;
let powerUpSpawnTimer;

let powerUpDelay = 300; //sets how long it takes before the next power up spawns
let powerUpDuration = 300; //sets how long the power up lasts

//variable which set the speed of the player and bullets
let permMoveSpeed = 5;
let permBulletSpeed = 7;

let bulletSpeed = permBulletSpeed;
let moveSpeed = permMoveSpeed;

var cols, rows;//varblies for rows and columns of the grid
var s = 100;//size of the squares that are made by the grid

var grid = [];// array to hold the grid system 
let levels = [];// array to hold the levels 
let currentRoom; // Track the current room

//creates the canvas and sets up the player and pointer.
function setup() {
  createCanvas(400, 400);
  strokeCap(PROJECT);
  
  //sets up the new wall code (see wall code, line 79)
  setupLevelCode();
  player = new playerCharacter(room01.x + room01.w / 2, room01.y + room01.h / 2, 20);
  
  pointer = new Pointer();
  room01 = new Room(50, 50, 300, 300);
}

function draw() {
  background(80);
  
  //camera
  translate(-player.x + width / 2, -player.y + height / 2);
  
  //processes the new collision detections and room/wall display (see wall code, line 79)
  rectMode(CORNER);
  levelTranslationCode();

  //draws and updates the pointer (see player code, line 260)
  pointer.direct();
  pointer.display();

  //draws and updates the player (see playerc code, line 260)
  player.display();
  player.move();
  player.powerReset();

  //draws and updates all of the bullets in the bullets array (see projectiles code, line 400)
  for (let i = 0; i < bullets.length; i++) {
    bullets[i].display();
    bullets[i].move();
  }

  //spawns the powerup (see powerups code, line 480)
  powerUpSpawnTimer = frameCount % powerUpDelay;
  spawnPowerup();

  //displays the powerups and checks if the player touches any (see powerups code, line 480)
  for (let i = 0; i < powerupsOnScreen.length; i++) {
    powerupsOnScreen[i].display();
    powerupsOnScreen[i].activateCheck();
  }

  //sets up the global timer because frameCount doesn't carry over to other scripts.
  globalTimer = frameCount;
}

//function to hold level arrays and make and push rooms to level arrays
function setupLevelCode() {
  //level arrays that hold thier own rooms
  let level1 = [];
  let level2 = [];
  let level3 = [];

  //levels are pushed into levels global array
  levels.push(level1);
  levels.push(level2);
  levels.push(level3);

  //varibles for how many rows and columns there are
  cols = floor(25);
  rows = floor(25);

  //loop that goes throgh and places the rows and columns
  for (var r = 0; r < rows; r++) {
    for (var c = 0; c < cols; c++) {
      var cell = new Cell(r, c);
      grid.push(cell);
    }
  }

    //stage 1 setup
    //starting room
  room01 = new Room(2, 2, 100, 100, true, false, false, false, false);
  level1.push(room01);
  
  //hallway to the first room
  room02 = new Room(1, 2, 100, 100, false, true, false, true, false);
  level1.push(room02);
  
  room03 = new Room(1, 3, 100, 100, false, true, true, false, false);
  level1.push(room03);
  
  
  //first big room
  room04 = new Room(2, 3, 100, 100, true, true, false, true, false);
  level1.push(room04);
  
  room041 = new Room(3, 3, 100, 100, true, false, false, true, false);
  level1.push(room041);
  
  room042 = new Room(2, 4, 100, 100, false, true, true, true, false);
  level1.push(room042);
  
  room043 = new Room(3, 4, 100, 100, true, false, true, true, false);
  level1.push(room043);
  
  room044 = new Room(2, 5, 100, 100, false, true, true, false, false);
  level1.push(room044);
  
  room045 = new Room(3, 5, 100, 100, true, false, true, true, false);
  level1.push(room045);
  
  
  //second hallway
  room05 = new Room(3, 6, 100, 100, false, true, true, false, false);
  level1.push(room05);
  
  room06 = new Room(4, 6, 100, 100, true, true, false, false, false);
  level1.push(room06);
  
  
  //second big room (zigzad upward)
  room07 = new Room(5, 6, 100, 100, true, true, true, false, false);
  level1.push(room07);
  
  room071 = new Room(5, 5, 100, 100, false, true, false, true, false);
  level1.push(room071);
  
  room072 = new Room(6, 6, 100, 100, true, true, true, false, false);
  level1.push(room072);
  
  room073 = new Room(6, 5, 100, 100, true, true, false, true, false);
  level1.push(room073);
  
  room074 = new Room(7, 6, 100, 100, true, true, true, false, false);
  level1.push(room074);
  
  room075 = new Room(7, 5, 100, 100, true, true, false, true, false);
  level1.push(room075);
  
  room076 = new Room(8, 6, 100, 100, true, true, true, false, false);
  level1.push(room076);
  
  room077 = new Room(8, 5, 100, 100, true, true, false, true, false);
  level1.push(room077);
  
  room078 = new Room(9, 6, 100, 100, true, true, true, false, false);
  level1.push(room078);
  
  room079 = new Room(9, 5, 100, 100, true, false, false, true, false);
  level1.push(room079);
  
  
  //third hallway
  room08 = new Room(10, 6, 100, 100, true, false, false, true, false);
  level1.push(room08);
  
  room09 = new Room(10, 7, 100, 100, true, false, true, true, false);
  level1.push(room09);
  
  
  //third big room (zigzag downward)
  room011 = new Room(9, 7, 100, 100, false, true, false, true, false);
  level1.push(room011);
  
  room012 = new Room(10, 8, 100, 100, true, false, true, true, false);
  level1.push(room012);
  
  room013 = new Room(9, 8, 100, 100, false, true, true, true, false);
  level1.push(room013);
  
  room014 = new Room(9, 9, 100, 100, false, true, true, true, false);
  level1.push(room014);
  
  room015 = new Room(10, 9, 100, 100, true, false, true, false, false);
  level1.push(room015);
  
  room016 = new Room(9, 10, 100, 100, false, false, true, false, true);
  level1.push(room016);
  
  
 //stage 2 setup
    //starting room
  room11 = new Room(2, 2, 100, 100, false, true, false, false, false);
  level2.push(room11);
    //correct path
  room12 = new Room(3, 2, 100, 100, true, true, false, true, false);
  level2.push(room12);
  
  room13 = new Room(3, 3, 100, 100, false, false, true, true, false);
  level2.push(room13);
  
  room14 = new Room(3, 4, 100, 100, false, true, true, false, false);
  level2.push(room14);
  
  room15 = new Room(4, 4, 100, 100, true, false, false, true, false);
  level2.push(room15);
  
  room16 = new Room(4, 5, 100, 100, true, true, true, false, false);
  level2.push(room16);
  
  room17 = new Room(3, 5, 100, 100, false, true, false, true, false);
  level2.push(room17);
  
  room18 = new Room(3, 6, 100, 100, false, true, true, false, false);
  level2.push(room18);
  
  room19 = new Room(4, 6, 100, 100, true, true, false, false, false);
  level2.push(room19);
  
  room120 = new Room(5, 6, 100, 100, true, true, false, false, false);
  level2.push(room120);
  
  room121 = new Room(6, 6, 100, 100, true, false, true, false, false);
  level2.push(room121);
  
  room122 = new Room(6, 5, 100, 100, false, true, false, true, false);
  level2.push(room122);
  
  room123 = new Room(7, 5, 100, 100, true, false, true, true, false); 
  level2.push(room123);
  
  room124 = new Room(7, 4, 100, 100, false, true, false, true, false);
  level2.push(room124);
  
  room125 = new Room(8, 4, 100, 100, true, false, true, false, false);
  level2.push(room125);
  
  room126 = new Room(8, 3, 100, 100, false, true, false, true, false);
  level2.push(room126);
  
  room127 = new Room(9, 3, 100, 100, true, false, false, false, true);
  level2.push(room127);
  
    //dead end 1
  room128 = new Room(4, 2, 100, 100, true, true, false, false, false);
  level2.push(room128);
  
  room129 = new Room(5, 2, 100, 100, true, false, false, true, false);
  level2.push(room129);
  
  room130 = new Room(5, 3, 100, 100, true, false, true, false, false);
  level2.push(room130);
  
  room131 = new Room(4, 3, 100, 100, false, true, false, false, false);
  level2.push(room131);
  
    //dead end 2
  room132 = new Room(5, 5, 100, 100, true, false, true, false, false);
  level2.push(room132);
  
  room133 = new Room(5, 4, 100, 100, false, true, false, true, false);
  level2.push(room133);
  
  room134 = new Room(6, 4, 100, 100, true, false, false, false, false);
  level2.push(room134);
  
    //dead end 3  
  room135 = new Room(7, 6, 100, 100, false, true, true, false, false);
  level2.push(room135);
  
  room136 = new Room(8, 6, 100, 100, true, false, false, false, false);
  level2.push(room136);
  
  
  
  //stage 3 setup
  //4 different path from the starting point, right path(room25) is the correct path, (room22,23,24 is not)
  room21 = new Room(5, 5, 100, 100, true, true, true, true, false);
  level3.push(room21)
  
  //going up
  room22 = new Room(5, 4, 100, 100, false, true, false, true, false);
  level3.push(room22)
  
  room221 = new Room(6, 4, 100, 100, true, false, true, false, false);
  level3.push(room221)
  
  room222 = new Room(6, 3, 100, 100, true, false, false, true, false);
  level3.push(room222)
  
  room223 = new Room(5, 3, 100, 100, false, true, true, false, false);
  level3.push(room223)
  
  room224 = new Room(5, 2, 100, 100, false, false, false, true, false);
  level3.push(room224)
  
  
  //going down
  room23 = new Room(5, 6, 100, 100, true, false, true, false, false);
  level3.push(room23)
  
  room231 = new Room(4, 6, 100, 100, false, true, false, true, false);
  level3.push(room231)
  
  room232 = new Room(4, 7, 100, 100, false, true, true, false, false);
  level3.push(room232)
  
  room233 = new Room(5, 7, 100, 100, true, true, false, false, false);
  level3.push(room233)
  
  room234 = new Room(6, 7, 100, 100, true, false, false, true, false);
  level3.push(room234);
  
  room235 = new Room(6, 8, 100, 100, false, false, true, false, false);
  level3.push(room235);

  
  //going left
  room24 = new Room(4, 5, 100, 100, false, true, true, false, false);
  level3.push(room24)
  
  room241 = new Room(4, 4, 100, 100, true, false, false, true, false);
  level3.push(room241)
  
  room242 = new Room(3, 4, 100, 100, false, true, false, true, false);
  level3.push(room242)
  
  room243 = new Room(3, 5, 100, 100, true, false, true, false, false);
  level3.push(room243)
  
  room244 = new Room(2, 5, 100, 100, false, true, false, false, false);
  level3.push(room244)

  
  //going right
  room25 = new Room(6, 5, 100, 100, true, false, false, true, false);
  level3.push(room25)
  
  room251 = new Room(6, 6, 100, 100, false, true, true, false, false);
  level3.push(room251)
  
  room252 = new Room(7, 6, 100, 100, true, false, true, false, false);
  level3.push(room252)
  
  room253 = new Room(7, 5, 100, 100, false, false, true, true, false);
  level3.push(room253)
  
  room254 = new Room(7, 4, 100, 100, false, true, false, true, false);
  level3.push(room254)
  
  room255 = new Room(8, 4, 100, 100, true, false, false, true, false);
  level3.push(room255)
  
  room256 = new Room(8, 5, 100, 100, false, true, true, false, false);
  level3.push(room256)
  
  room257 = new Room(9, 5, 100, 100, true, false, false, false, true);
  level3.push(room257)
  }

// this function is the code that checks if the player has completed the level and moves to the next level if the player has reached the finsh room.
function levelTranslationCode() {
  let currentLevel = levels[0];

  for (var i = 0; i < grid.length; i++) {
    grid[i].show();
  }

  for (var j = 0; j < currentLevel.length; j++) {
    currentLevel[j].display();
    // Check if the player is in the current room
    if (currentLevel[j].isOccupied(player)) {
      currentRoom = currentLevel[j]; // Set the current room
    }

    if (currentRoom) {
      player.checkCollision(currentRoom);
      
      // Check if the room has a finish and if the player is in it
      if (currentRoom.finish) {
        // Move to the next level if there is one
        if (levels.length > 1) {
          levels.shift(); // Remove the current level
          // Reset the player's position to the starting position of the new room
          player.x = levels[0][0].x + levels[0][0].w / 2; // Center the player in the new room
          player.y = levels[0][0].y + levels[0][0].h / 2;
        }
      }
    }
  }
}


// this Room class makes the room which then can be place at any cell on the grid. also need to define if there is a open on an of the sides of the room with ture and false. also need to stat if the room is the finsh room
class Room {
  constructor(row, col, w, h, left, right, top, bot, fin = false) {
    this.x = row * s; // x position of the room
    this.y = col * s; // y position of the room
    this.w = w; // width of the room
    this.h = h; // height of the room
    this.walls = new Wall(this, left, right, top, bot); // Create walls for the room
    this.finish = fin; // Finish flag
  }

  display() {
    // Draw the room
    if (this.finish) // if the room is the finsh room turn it green
      {
    stroke('green');
    fill('green');
      }
    else
    {
    stroke('white');
    fill('white');
    }
    
    // makes the room
    rect(this.x, this.y, this.w, this.h);
    this.walls.display(); // Display the walls
  }
  
  //this function is used to detrime the player location mostly for the finish room so a player can move on to the next level.
  isOccupied(player) 
  {
return (
        player.x > this.x &&
        player.x < this.x + this.w &&
        player.y > this.y &&
        player.y < this.y + this.h
      );

  }
}


// this class makes the walls that are displayed on top of the room class.
class Wall {
constructor(room, left, right, top, bot) {
    this.room = room;
    this.left = left;
    this.right = right;
    this.top = top;
    this.bot = bot;
  }

  display() {
    const { x, y, w, h } = this.room; // Use w and h instead of width and height
    stroke('black'); // Wall color
    strokeWeight(10); // Gives clear border for the wall

 // uses lines for the walls that takes any rectanigale and makes sure that the walls are printed corrcetly 
    
      // Left wall
    if(!this.left) // calls for a doorway to be made on the left wall of the room
      {
        line(x, y + h, x, y);//solid wall if door is not called
      }
    
    // Right wall
    if(!this.right) // calls for a doorway to be made on the right wall of the room
      {
        line(x + w, y, x + w, y + h);//solid wall if door is not called
      }
    
    // Top wall
    if(!this.top) // calls for a doorway to be made on the top wall of the room
      {
        line(x, y, x + w, y);//solid wall if door is not called
      }
    
    // Bottom wall
    if(!this.bot) // calls for a doorway to be made on the bottom wall of the room
      {
        line(x + w, y + h, x, y + h);//solid wall if door is not called
      }
  }
  
  // For the player class to define walls of the room. Line 78
    getBounds() {
    const { x, y, w, h } = this.room;  
    return {
      left: x,
      right: x + w,
      top: y,
      bottom: y + h
    };
  } 
}

//defines the cells on the grid
function Cell(r,c)
{
  this.r = r;// rows
  this.c = c;// columns
  
  this.show = function()
  {
    var x = r*s;//postion of x of the cell
    var y = c*s;//postion of y of the celll
    stroke(255);
    noFill();
    rect(x,y,s,s)
  }
}


//PLAYER CODE

//player object
function playerCharacter(x_, y_) {
  this.x = x_; //player's X position
  this.y = y_; //player's Y position
  this.width = 20;

  this.powerTimer = -1; //initializes the timer for the powerups

  //displays the player
  this.display = function () {
    rectMode(CENTER);
    strokeWeight(1);
    fill(255);
    square(this.x, this.y, this.width);
  };

  //moves the player (and pointer) around when certain keys are pressed. You can either use the arrow keys or W, A, S, and D.
  this.move = function () {
    if (keyIsDown(RIGHT_ARROW) && keyIsDown(UP_ARROW)) {
      this.x = this.x + moveSpeed / sqrt(2);
      this.y = this.y - moveSpeed / sqrt(2);
    } else if (keyIsDown(68) && keyIsDown(87)) {
      this.x = this.x + moveSpeed / sqrt(2);
      this.y = this.y - moveSpeed / sqrt(2);
    } else if (keyIsDown(RIGHT_ARROW) && keyIsDown(DOWN_ARROW)) {
      this.x = this.x + moveSpeed / sqrt(2);
      this.y = this.y + moveSpeed / sqrt(2);
    } else if (keyIsDown(68) && keyIsDown(83)) {
      this.x = this.x + moveSpeed / sqrt(2);
      this.y = this.y + moveSpeed / sqrt(2);
    } else if (keyIsDown(LEFT_ARROW) && keyIsDown(DOWN_ARROW)) {
      this.x = this.x - moveSpeed / sqrt(2);
      this.y = this.y + moveSpeed / sqrt(2);
    } else if (keyIsDown(65) && keyIsDown(83)) {
      this.x = this.x - moveSpeed / sqrt(2);
      this.y = this.y + moveSpeed / sqrt(2);
    } else if (keyIsDown(LEFT_ARROW) && keyIsDown(UP_ARROW)) {
      this.x = this.x - moveSpeed / sqrt(2);
      this.y = this.y - moveSpeed / sqrt(2);
    } else if (keyIsDown(65) && keyIsDown(87)) {
      this.x = this.x - moveSpeed / sqrt(2);
      this.y = this.y - moveSpeed / sqrt(2);
    } else if (keyIsDown(RIGHT_ARROW)) {
      this.x = this.x + moveSpeed;
    } else if (keyIsDown(68)) {
      this.x = this.x + moveSpeed;
    } else if (keyIsDown(DOWN_ARROW)) {
      this.y = this.y + moveSpeed;
    } else if (keyIsDown(83)) {
      this.y = this.y + moveSpeed;
    } else if (keyIsDown(LEFT_ARROW)) {
      this.x = this.x - moveSpeed;
    } else if (keyIsDown(65)) {
      this.x = this.x - moveSpeed;
    } else if (keyIsDown(UP_ARROW)) {
      this.y = this.y - moveSpeed;
    } else if (keyIsDown(87)) {
      this.y = this.y - moveSpeed;
    }
  };

  //resets the player (used for powerups)
  this.reset = function () {
    moveSpeed = permMoveSpeed;
    bulletSpeed = permBulletSpeed;
  };

  //activates a certain powerup based on the powerup type. also sets a timer for the powerup.
  this.activate = function (type) {
    this.powerTimer = globalTimer % powerUpDuration;
    if (type === "speed") {
      if (moveSpeed === permMoveSpeed) {
        moveSpeed = moveSpeed * 2;
      }
    }
  };

  //resets the player once the powerUpDuration timer has expired.
  this.powerReset = function () {
    if (this.powerTimer === (globalTimer % 300) + 1) {
      this.reset();
    }
  };

  this.checkCollision = function(room) {
  const bounds = room.walls.getBounds(); // Get the bounds of the room's walls

  // Check collision with left wall
  if (this.x - this.width < bounds.left) {
    if (!room.walls.left) { // Check if there is a door
      this.x = bounds.left + this.width; // Push player to the right off the left wall
    }
  }

  // Check collision with right wall
  if (this.x + this.width > bounds.right) {
    if (!room.walls.right) { // Check if there is a door
      this.x = bounds.right - this.width; // Push player to the left off the right wall
    }
  }

  // Check collision with top wall
  if (this.y - this.width < bounds.top) {
    if (!room.walls.top) { // Check if there is a door
      this.y = bounds.top + this.width; // Push player down from the top wall
    }
  }

  // Check collision with bottom wall
  if (this.y + this.width > bounds.bottom) {
    if (!room.walls.bot) { // Check if there is a door
      this.y = bounds.bottom - this.width; // Push player up from the bottom wall
    }
  }
}
}

//pointer object
function Pointer() {
  //sets the distance the pointer is from the player, as well as its initial x and y position
  this.distance = 30;
  this.x = player.x + this.distance;
  this.y = player.y;

  //trigonometry magic which figures out the location of the pointer (if you want to figure out what's going on here and write a proper explanation then be my guest)
  this.direct = function () {
    let angleCoef = atan2(mouseY - height / 2, mouseX - width / 2)
    this.x = player.x + this.distance * cos(angleCoef);
    this.y = player.y + this.distance * sin(angleCoef);
  };

  //displays the pointer
  this.display = function () {
    strokeWeight(4);
    point(this.x, this.y);
  };
}

//PROJECTILES CODE

//bullet object. Could maybe be reused for other projectiles if we feel like giving the enemies guns
function projectile(x_, y_, o_) {
  //sets the bullet's initial x and y positions, which should be wherever the pointer is at.
  this.x = x_;
  this.y = y_;

  //this is the order that the bullet was spawned in. This is useful for finding specific bullets.
  this.order = o_;

  //more trigonometry magic! This time, it figures out how fast the bullets should be moving along the X and Y axis
  let angleCoef = atan2(mouseY - height / 2, mouseX - width / 2);
  this.xVelocity = bulletSpeed * cos(angleCoef);
  this.yVelocity = bulletSpeed * sin(angleCoef);

  //displays the bullets
  this.display = function () {
    strokeWeight(3);
    point(this.x, this.y);
  };

  //moves the bullets
  this.move = function () {
    this.x = this.x + this.xVelocity;
    this.y = this.y + this.yVelocity;
// Check if the bullet is still within the bounds of the room
    let currentLevel = levels[0]; // Get the current level
    let isInsideRoom = false;

    for (let room of currentLevel) {
        if (this.x > room.x && this.x < room.x + room.w && this.y > room.y && this.y < room.y + room.h) {
            isInsideRoom = true; // Bullet is inside the room
            break;
        }
    }

    // If the bullet is outside of all rooms, remove it
    if (!isInsideRoom) {
        removeBullet(this.order);
    }
  };
}

//function which deletes the bullet by cycling through the list until it gets to the bullet specified by the order, then deletes it.
function removeBullet(order) {
  print(true)
  for (let i = 0; i < bullets.length; i++) {
    if (bullets[i].order === order) {
      bullets.splice(i, 1);
      i = bullets.length;
    }
  }
}

//makes a new bullet whenever the mouse is pressed, then adds it to the array of bullets.
function mousePressed() {
  let bullet = new projectile(pointer.x, pointer.y, bulletOrder);
  bullets.push(bullet);
  bulletOrder++;
}

//POWERUP CODE

//spawns a new powerup in a random spot on the canvas.
function spawnPowerup(){
  if(powerUpSpawnTimer === 0){
    powerupsOnScreen.pop();
    let newPower = new powerUp(random(width),random(height),"speed");
    powerupsOnScreen.push(newPower);
  }
}

//the power up object.
function powerUp(x_,y_,t_){
  this.x = x_ //x position
  this.y = y_ //y position
  this.type = t_ //type of powerup
  
  this.radius = 10 //radius of the circle
  this.activated = false //whether or not the powerup has been activated
  
  //displays the powerup (if the player hasn't already activated it)
  this.display = function(){
    if (this.activated === false){
      fill(0, 0, 255)
      circle(this.x, this.y, this.radius)
    }
  }
  
  //activates the powerup if the player gets within a certain distance (see player.js), and makes sure it can't be activated more than once.
  this.activateCheck = function(){
    if (dist(player.x, player.y, this.x, this.y) < this.radius*2){
      if(this.activated === false){
          player.activate(this.type);
        this.activated = true;
      }
    }
  }
}

//removes the powerup from the screen.
function removeThisPowerup(){
  powerupsOnScreen.pop();
}

